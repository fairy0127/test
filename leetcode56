/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        List<Interval> ret = new ArrayList<Interval>();
        if(intervals.size()==0)
            return ret;
        ret.add(intervals.get(0));
        for(int it=1; it< intervals.size(); it++)
        {
            Interval item = intervals.get(it);
            boolean add = false;
            int cnt = 0;
            for(int j=0; j< ret.size();j++)
            {
                Interval i = ret.get(j);
                if(i.start<=item.start && i.end>=item.end)
                {
                    add = false;
                    break;
                }

                if(i.start<=item.start&&item.start<=i.end&&i.end<=item.end)
                {
                    add = true;
                    item.start = i.start;
                    ret.remove(j);
                    j = j-1;
                }
                else if(item.end>=i.start&& i.start>=item.start&& i.end>=item.end)
                {
                    add = true;
                    item.end = i.end;
                    ret.remove(j);
                    j= j-1;

                }
                else if(i.start>=item.start && i.end<=item.end)
                {
                    add = true;
                    ret.remove(j);
                    j = j-1;
                }
                else if(item.start > i.end || item.end < i.start)
                {
                    add = true;
                }
               // cnt = cnt +1;

            }
            if(add)
                {
                    ret.add(item);
                }
        }
        return ret;

    }
}
