class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ret = new ArrayList<List<Integer>>();
        int[] test = candidates;
        Arrays.sort(test);
        int sign = -1;
        if(candidates[candidates.length-1]<target)
        {
            ret = getNext(candidates,target);
            return ret;
        }
        for(int i=0; i<test.length; i++)
        {
            if(test[i] >= target)
            {
                sign = i;
                break;
            }
        }
        if(sign == -1)
        {
            return ret;
        }
        else
        {
            if(test[sign] == target)
            {
                List<Integer> equalItem = new ArrayList<Integer>();
                equalItem.add(target);
                ret.add(equalItem);
            }
            if(sign == 0)
            {
                return ret;
            }
            int[] newCan = new int[sign];
            for(int i=0; i< sign; i++)
            {
                newCan[i] = test[i];
            }

            List<List<Integer>> items = getNext(newCan, target);
            for(int i=0; i< items.size(); i++)
            {
                ret.add(items.get(i));
            }

        }
        return ret;

    }
    public List<List<Integer>> getNext(int[] candidates, int target)
    {
        List<List<Integer>> ret = new ArrayList<List<Integer>>();
        for(int i=0; i< candidates.length; i++)
        {
            if(candidates[i] < target)
            {
                int newTarget = target-candidates[i];
                int sign = -1;
                for(int a=0; a<candidates.length;a++)
                {
                    if(candidates[a]>=newTarget)
                    {
                       sign = a;
                        break;

                    }
                }
                if(sign != -1)
                {
                    if(candidates[sign] == newTarget)
                    {
                        List<Integer> equalItem = new ArrayList<Integer>();
                        equalItem.add(candidates[i]);
                        equalItem.add(newTarget);
                        Collections.sort(equalItem);
                        if(!ret.contains(equalItem))
                        {
                            ret.add(equalItem);
                        }
                    }

                    if(sign ==0)
                        continue;
                    int[] newCand = new int[sign];
                    for(int na=0; na<sign;na++)
                    {
                        newCand[na] = candidates[na];
                    }
                    List<List<Integer>> items = getNext(newCand, newTarget);
                    if(items.size() != 0)
                    {
                        for(int j=0; j<items.size();j++)
                        {
                            List<Integer> item = items.get(j);
                            item.add(candidates[i]);
                            Collections.sort(item);
                            if(!ret.contains(item))
                            {
                                ret.add(item);
                            }
                        }
                    }

                }
                else
                {
                    List<List<Integer>> items = getNext(candidates, newTarget);
                    if(items.size() != 0)
                    {
                        for(int j=0; j<items.size();j++)
                        {
                            List<Integer> item = items.get(j);
                            item.add(candidates[i]);
                            Collections.sort(item);
                            if(!ret.contains(item))
                            {
                                ret.add(item);
                            }
                        }
                    }

                }

            }
            else if(candidates[i] == target)
            {
                List<Integer> item = new ArrayList<Integer>();
                item.add(target);
                if(!ret.contains(item))
                {
                    ret.add(item);
                }
            }
            else
            {
                break;
            }
        }
        return ret;

    }
}
