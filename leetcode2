2. Add Two Numbers
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

My answer:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int a = 0;
        ListNode result= new ListNode(0);
        ListNode temp;
        ListNode add1 = l1;
        ListNode add2 = l2;
        result.next = new ListNode(0);
        temp = result;
        
        while(add1 != null)
        {
            if(add1.next != null)
            {
               temp.next = new ListNode(0); 
            }
            
            temp.val = add1.val + add2.val + a;
            if(temp.val >= 10)
            {
                temp.val = temp.val-10;
                a = 1;
            }
            else
            {
                a=0;
            }


            temp = temp.next;
            add1 = add1.next;
            add2 = add2.next;
            
            
        }
        return result;
        
    }
}
