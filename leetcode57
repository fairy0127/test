/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
        List<Interval> ret = intervals;
        if(intervals.size()==0)
        {
            ret.add(newInterval);
            return ret;
        }
        Interval item = newInterval;
        boolean add = false;
        int addIndex = -1;
        for(int j=0; j< ret.size();j++)
            {
                Interval i = ret.get(j);
                if(i.start<=item.start && i.end>=item.end)
                {
                    add = false;
                    break;
                }

                if(i.start<=item.start&&item.start<=i.end&&i.end<=item.end)
                {
                    add = true;
                    //i.end = item.end;
                    item.start = i.start;
                    ret.remove(j);
                    addIndex = j;
                    j = j-1;
                }
                else if(item.end>=i.start&& i.start>=item.start&& i.end>=item.end)
                {
                    add = true;
                    item.end = i.end;
                    ret.remove(j);
                    addIndex = j;
                    j= j-1;

                }
                else if(i.start>=item.start && i.end<=item.end)
                {
                    add = true;
                    ret.remove(j);
                    addIndex = j;
                    j = j-1;
                }
                else
                {
                    System.out.println("special case;");
                    if(j<ret.size()-1 && j>0)
                    {
                        Interval next = ret.get(j+1);
                        Interval befor = ret.get(j-1);
                        if(item.start > i.end&& item.end <= next.start)
                        {
                            add = true;
                            addIndex = j+1;
                        }
                        else if(item.start>=befor.end && item.end <=i.start)
                        {
                            add=true;
                            addIndex = j;
                        }
                    }
                    if(j==0)
                    {
                        if(item.end<=i.start)
                        {
                            add=true;
                            addIndex = 0;
                        }
                        else
                        {
                            if(j+1<=ret.size()-1)
                            {
                                Interval next = ret.get(j+1);

                                if(item.start > i.end&& item.end <= next.start)
                                {
                                    add = true;
                                    addIndex = j+1;
                                }

                            }
                        }
                    }
                    if(j==ret.size()-1)
                    {
                        if(item.start > i.end)
                        {
                            add = true;
                            addIndex = j+1;
                        }
                        else
                        {
                            if(j-1>=0)
                            {
                                Interval befor = ret.get(j-1);
                                if(item.end<=i.start&&item.start >=befor.end)
                                {
                                    add=true;
                                    addIndex = j;
                                }
                            }
                        }
                    }




                }

               // cnt = cnt +1;

            }
            if(add)
            {

                ret.add(addIndex,item);
            }
        return ret;
    }
}
